
void mkdir ::CreateinRoot(int posInodo, string path, string pathfisc, int posSB, int n, int start)
{
    FILE *file;
    Tabla_Inodos inodo;
    file = fopen(pathfisc.c_str(), "rb+");
    fseek(file, posInodo, SEEK_SET);
    fread(&inodo, sizeof(Tabla_Inodos), 1, file);
    fclose(file);

    Super_Bloque superbloque;
    file = fopen(pathfisc.c_str(), "rb+");
    fseek(file, posSB, SEEK_SET);
    fread(&superbloque, sizeof(Super_Bloque), 1, file);
    fclose(file);

    // Se separa la ruta para validacion de existencias
    int posInit = 0;
    int posFound = 0;
    string splitted;
    char pattern = '/';
    // es la ruta que queda
    string str = path;

    while (posFound >= 0)
    {
        posFound = str.find(pattern, posInit);
        // es la carpeta que se lee
        splitted = str.substr(posInit, posFound - posInit);
        posInit = posFound + 1;

        if (!splitted.empty())
        {
            if (posFound >= 0)
            {
                str = str.substr(posFound, str.length());
            }

            break;
        }
    }
    string nm = nombre(str);
    for (int i = 0; i < 15; i++)
    {
        if (inodo.i_block[i] < 0)
        {
            inodo.i_block[i] = superbloque.s_block_start + ((superbloque.s_first_blo - 1) * sizeof(Bloque_Carpetas));

            Bloque_Carpetas blocarpeta;
            strcpy(blocarpeta.name, nm.c_str());
            strcpy(blocarpeta.padre, "");
            blocarpeta.b_content[0].b_name[0] = '0';
            blocarpeta.b_content[0].b_inodo = -1;
            blocarpeta.b_content[1].b_name[0] = '0';
            blocarpeta.b_content[1].b_inodo = -1;
            blocarpeta.b_content[2].b_name[0] = '0';
            blocarpeta.b_content[2].b_inodo = -1;
            blocarpeta.b_content[3].b_name[0] = '0';
            blocarpeta.b_content[3].b_inodo = -1;

            char bmi[n];
            char bmb[3 * n];
            fseek(file, superbloque.s_bm_block_start, SEEK_SET);
            fread(&bmb, sizeof(bmb), 1, file);
            bmb[superbloque.s_first_blo - 1] = '1';
            fseek(file, superbloque.s_bm_block_start, SEEK_SET);
            fwrite(&bmb, sizeof(bmb), 1, file);
            fclose(file);

            file = fopen(pathfisc.c_str(), "rb+");
            fseek(file, superbloque.s_bm_inode_start, SEEK_SET);
            fread(&bmi, sizeof(bmi), 1, file);
            bmi[superbloque.s_first_ino - 1] = '1';
            fseek(file, superbloque.s_bm_inode_start, SEEK_SET);
            fwrite(&bmi, sizeof(bmi), 1, file);
            fclose(file);

            file = fopen(pathfisc.c_str(), "rb+");
            fseek(file, posInodo, SEEK_SET);
            fwrite(&inodo, sizeof(Tabla_Inodos), 1, file);
            fclose(file);

            file = fopen(pathfisc.c_str(), "rb+");
            fseek(file, superbloque.s_block_start + ((superbloque.s_first_blo - 1) * sizeof(Bloque_Carpetas)), SEEK_SET);
            fwrite(&blocarpeta, sizeof(Bloque_Carpetas), 1, file);
            fclose(file);

            superbloque.s_first_blo++;
            superbloque.s_free_blocks_count--;

            file = fopen(pathfisc.c_str(), "rb+");
            fseek(file, start, SEEK_SET);
            fwrite(&superbloque, sizeof(Super_Bloque), 1, file);
            fclose(file);
        }
    }
}
